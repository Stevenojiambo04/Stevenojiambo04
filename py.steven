{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyM3CmHROvkKiIEIgwzvotBz",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Stevenojiambo04/Stevenojiambo04/blob/main/py.steven\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YAwHAvRKFgsX",
        "outputId": "8d23985f-9c6b-4d8b-9d29-e22e5a0f562f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0\n",
            "1\n",
            "2\n",
            "3\n",
            "4\n"
          ]
        }
      ],
      "source": [
        "count = 0\n",
        "while count < 10:\n",
        "    print(count)\n",
        "    if count == 4:\n",
        "        break\n",
        "    count += 1\n",
        "#while loop using key word break\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "count = 0\n",
        "while count < 5:\n",
        " count += 1\n",
        " if count == 3:\n",
        "  continue\n",
        " print(count)\n",
        "#while loop using key word continue"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "I86Y3-LEHm1z",
        "outputId": "6fb4f95d-bb6f-4fec-8c00-4dec1d6d7c53"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1\n",
            "2\n",
            "4\n",
            "5\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "rJlQF5ehMAtJ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Sum of numbers\n",
        "num = 1\n",
        "sum = 0\n",
        "while num <= 5:\n",
        "    sum += num\n",
        "    num += 1\n",
        "print(f\"The sum of numbers from 1 to 5 is: {sum}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "avos5Ry0LC_b",
        "outputId": "178dcff5-5885-4c49-9838-803563a812b1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The sum of numbers from 1 to 5 is: 15\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Multiplication Table\n",
        "num = 3\n",
        "i = 1\n",
        "while i <= 10:\n",
        "    print(f\"{num} x {i} = {num * i}\")\n",
        "    i += 1\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aHXcWJogLF7J",
        "outputId": "92d2417c-f534-44c8-a913-528631c4ffa3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "3 x 1 = 3\n",
            "3 x 2 = 6\n",
            "3 x 3 = 9\n",
            "3 x 4 = 12\n",
            "3 x 5 = 15\n",
            "3 x 6 = 18\n",
            "3 x 7 = 21\n",
            "3 x 8 = 24\n",
            "3 x 9 = 27\n",
            "3 x 10 = 30\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "#User Input\n",
        "user_input = \"\"\n",
        "while user_input.lower() != \"exit\":\n",
        "    user_input = input(\"Enter something (type 'exit' to quit): \")\n",
        "    print(f\"You entered: {user_input}\")\n",
        "print(\"Program terminated.\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-12qY7JSMCww",
        "outputId": "ac0795e9-03ee-48e8-9ace-5296cc5e0101"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter something (type 'exit' to quit): steven\n",
            "You entered: steven\n",
            "Enter something (type 'exit' to quit): exit\n",
            "You entered: exit\n",
            "Program terminated.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Finding the First Positive Number\n",
        "numbers = [-10, -5, -2, 0, 5, 10]\n",
        "index = 0\n",
        "while index < len(numbers):\n",
        "    if numbers[index] > 0:\n",
        "        print(f\"The first positive number is: {numbers[index]}\")\n",
        "        break\n",
        "    index += 1\n"
      ],
      "metadata": {
        "id": "A8CsL-M2MVum",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "39e10352-9efd-4f90-ed0a-3b098b4f0ac0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The first positive number is: 5\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Printing Even Numbers\n",
        "num = 2\n",
        "while num <= 20:\n",
        "    print(num)\n",
        "    num += 2\n",
        "\n"
      ],
      "metadata": {
        "id": "ptzrkmTRMXgf",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "94603e94-0727-4ab7-afaf-8efe4910ed28"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2\n",
            "4\n",
            "6\n",
            "8\n",
            "10\n",
            "12\n",
            "14\n",
            "16\n",
            "18\n",
            "20\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "#Repeating a String\n",
        "string = \"Hello\"\n",
        "count = 0\n",
        "while count < 5:\n",
        "    print(string)\n",
        "    count += 1\n"
      ],
      "metadata": {
        "id": "dLsLmMrMMkGv",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "23c68435-9d8b-46a3-efa1-b7f17afe7ba7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Hello\n",
            "Hello\n",
            "Hello\n",
            "Hello\n",
            "Hello\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "#Guessing game\n",
        "import random\n",
        "\n",
        "target = random.randint(1, 10)\n",
        "guess = None\n",
        "\n",
        "while guess != target:\n",
        "    guess = int(input(\"Guess a number between 1 and 10: \"))\n",
        "    if guess < target:\n",
        "        print(\"Too low!\")\n",
        "    elif guess > target:\n",
        "        print(\"Too high!\")\n",
        "print(\"Congratulations! You guessed the correct number.\")\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1X_O-BxfRwc9",
        "outputId": "744b1e85-2c4e-4ad5-cda0-23c35c14285b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Guess a number between 1 and 10: 4\n",
            "Too low!\n",
            "Guess a number between 1 and 10: 6\n",
            "Too low!\n",
            "Guess a number between 1 and 10: 8\n",
            "Too low!\n",
            "Guess a number between 1 and 10: 9\n",
            "Congratulations! You guessed the correct number.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "-xYvJvOuVEHP"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}